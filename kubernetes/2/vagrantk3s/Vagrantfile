#boxes
U = 'ubuntu/bionic64'
D = 'debian/buster64'


MASTER = '192.168.1.90'
NODES = [
  { hostname: 'm1', type: "master", ip: MASTER, mem: 1000, m: MASTER },
  { hostname: 'w1', type: "worker", ip: '192.168.1.93', mem: 1600, m: MASTER },
  { hostname: 'w2', type: "worker", ip: '192.168.1.94', mem: 1600, m: MASTER },
  { hostname: 'w3', type: "worker", ip: '192.168.1.95', mem: 1600, m: MASTER },
]

Vagrant.configure("2") do |config|
    NODES.each do |node|
        config.vm.define node[:hostname] do |nodeconfig|
            nodeconfig.vm.box = U
            nodeconfig.vm.hostname = node[:hostname]
            

            # Additional Network
            nodeconfig.vm.network   :public_network,
                                    bridge: "wlp2s0",
                                    ip: node[:ip],
                                    # virtualbox__intnet: true,
                                    nic_type: "virtio"
            
            
            # Virtual hardware configuration
            nodeconfig.vm.provider "virtualbox" do |v|
                v.memory = node[:mem]
                v.cpus = 1
                #v.customize ["modifyvm",:id,"--memory",node[:mem],"--cpus","1"]
                v.default_nic_type = "virtio"
                v.linked_clone = true
                
                nm = node[:hostname]
                v.customize ["modifyvm", :id, "--name", nm]

                # cREATE DISK
                if node[:type] == "worker"
                   v.customize [ "createmedium",
                                 "--filename", "disk-#{nm}.vdi",
                                 "--size", 30*1024 ]

                   v.customize [ "storageattach", :id, 
                                  "--storagectl", "SCSI",
                                  "--port", 2, "--device", 0,"--type", "hdd",
                                  "--medium", "disk-#{nm}.vdi" ]
                end

            end
                
            nodeconfig.vm.boot_timeout = 400
            
            nodeconfig.vm.provision "shell", 
                path: 'provision.sh', 
                args: [ node[:hostname], node[:ip], node[:m], node[:type] ]
            
            
            if node[:type] == "master"
              nodeconfig.trigger.after :up do |trigger|
                trigger.run = \
                        {inline: "sh -c 'cp k3s.yaml /home/ger/.kube/config'"}
              end
            end
        end
    end
end
